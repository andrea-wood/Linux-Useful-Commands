# 							
# Linux-Useful-Commands	
#

# list all directories > 1GB in the partition
du -h <dir> | grep '^\s*[0-9\.]\+G'

# total size of the current directory including all the subdirectories
du -ch | grep total

# This displays a summary of the directory size. It is the simplest way to know the total size of the current directory
du -s

# Export All Databases Mysql
mysqldump -u root -p --all-databases | gzip > {database}.sql.gz
mysqldump -u root -p --opt --nanoall-databases > alldb.sql
mysqldump -u root -p --all-databases --skip-lock-tables > alldb.sql

# Import gz in database
zcat /path/to/file.sql.gz | mysql -u 'root' -p'password' your_database

# Using tar and ssh to efficiently copy files preserving permissions
tar zcvf - /dir/ | ssh -p port_number user@host "tar zxv -C /dir/"
# Extract same dir
tar -zxvf file.tar.gz --strip 1

#
# SCREEN 
#

# Starting Linux Screen
screen
# Detaching From Screen
Ctrl-a + d
# Creating Windows
Ctrl-a + c
# Switching Between Windows
Ctrl-a + n
# Attach to a session which is already attached elsewhere
screen -x (if you have multiple screens: screen -r  31844.pts-0.office)
# Create a running log of the session
Ctrl-a + H
# Getting Alerts
Ctrl-a + M 
# To monitor for silence or no output 
Ctrl-a + _
# Locking Your Screen Session
Ctrl-a + x
# Stopping Screen
Ctrl-a + k or exit


# To append the string to file 
echo "hello" >> greetings.txt
# To append the contents of the file temp.txt to file data.txt
cat temp.txt >> data.txt
# To append the current date/time timestamp to the file dates.txt
date >> dates.txt

#
# SSH
#

# check if ssh is running
ps aux | grep sshd
# check if the process sshd is listening on port 22
netstat -plant | grep :22
# check if the port 22 TCP file is open
lsof -i | grep sshd
# Access to host behind a router from remote
ssh -L 5001:192.168.x.x:5001 [-p port_number] user@hostname
(192.168.x.x --> is the ip on the lan of the remote host)

## Signature Authentication Openwrt ##

1. Generate Private Key using PuTTYgen (type: SSH2-RSA)
2. [FOR WINDOWS] Export private key to openssh format in Conversions -> Export OpenSSH Key (without passphrase)
3. Send the key on the router via ftp or ssh (ssh root@openwrt "echo $(cat ~/.ssh/private_key) >>/etc/dropbear/private_key_openssh)
4. Convert openssh format key to dropbear format with dropbearconvert: dropbearconvert openssh dropbear private_key_openssh private_key_dropbear
5. Extract public key from private key: dropbearkey -y -t rsa -f /etc/dropbear/private_key_dropbear
6. Create if not exist file authorized_keys and copy the public key: cat /etc/dropbear/private_key_dropbear >> /etc/dropbear/authorized_keys && chmod 0600 /etc/dropbear/authorized_keys
7. Add passphrase on PuttyGen and save the private key
8. Run Pageant and add the new key


## FIX FULL QMAIL QUEUE ##
# See messages in queue
tail -f /var/log/qmail/current
df
# Stop qmail
/etc/rc.d/init.d/qmail stop
cd /var/qmail/
ls -l
# remove queue directory
rm -rf queue
# check space
df
# to queue again use qmail repair at http://pyropus.ca/software/queue-repair/queue-repair-0.9.0.tar.gz
mkdir /temp
cd /temp
wget http://pyropus.ca/software/queue-repair/queue-repair-0.9.0.tar.gz
tar xfz queue-repair-0.9.0.tar.gz
cd queue-repair-0.9.0
./queue_repair.py -c -s 23 --no-bigtodo .
# check if queue dir is created in the temp dir
ls -l queue
# repair qmail for real
./queue_repair.py -c -s 23 --no-bigtodo /var/qmail
 ls -l /var/qmail/
# restart qmail
/etc/rc.d/init.d/qmail start
# test qmail
echo test | mail test@domain.com
tail -f /var/log/qmail/current
...
@400000003f88426f097eb3c4 starting delivery 1: msg 100179 to remote test@domain.com
...


## IPTABLES ##

# Accept all ssh trafic from  one ip with comment
iptables -A INPUT -p tcp --dport 22 -s YourIP -j ACCEPT -m comment --comment "Your comment"
# Drop all ssh trafic from all ip
iptables -A INPUT -p tcp --dport 22 -j DROP
# Accept all https trafic from all ip
iptables -I INPUT -p tcp --dport 443 -j ACCEPT
# Add a rule to the top of the chain
iptables -I INPUT -p tcp --dport 22 -s YourIP -j ACCEPT -m comment --comment "Your comment"
# List rules with number
iptables -L -n --line-numbers
# Remove one rule
iptables -D INPUT line_number
# SAVE RULES
iptables-save > /etc/iptables/rules.v4 (FOR IPv6 ip6tables-save > /etc/iptables/rules.v6 )
# ADD RULES TO START UP SCRIPT
echo "iptables-restore < /etc/iptables/rules.v4" > /etc/rc.local

# CREATE SSH LIMITED ACCESS TO WWW DIR OVER SFTP FOR USER NO HOME, NO SHELL
# See: https://www.linode.com/docs/tools-reference/tools/limiting-access-with-sftp-jails-on-debian-and-ubuntu
# Edit ssh config
nano /etc/ssh/sshd_config
# Add group rules
Match Group www-data
    ChrootDirectory /var/www
    X11Forwarding no
    AllowTcpForwarding no
    ForceCommand internal-sftp
# Restart ssh server
service ssh restart
# Add user no home
adduser --no-create-home foo
# Change the primary group to group www-data for the user foo
usermod -g www-data foo 
# Check users groups
groups foo
#  Set the correct permissions on /var/www
chgrp -R www-data /var/www/*
chmod -R g+w /var/www/*


## copy or move all files in dir up one level
cp dir/* .
mv dir/* .


## KVM
# List status vms
virsh list --all


#UNTRACK FILES AFTER .gitingore MODIFICATION

# First commit any outstanding code changes, and then, run this command:
git rm -r --cached .

#This removes any changed files from the index(staging area), then just run:
git add .

#Commit it:
git commit -m ".gitignore is now working"

#To undo git rm --cached filename
git add filename.
